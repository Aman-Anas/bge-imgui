from bge.types import KX_Scene
import bge
import sys

from . import bgimgui
from .bgimgui import widgets
from imgui_bundle import imgui

from .my_windows import MyCustomHealthBarWindow, MyTextWindow


class MyCustomGUI(bgimgui.BGEImguiWrapper):
    # Example class for how you would override and make your own GUI

    def set_style(self):
        pass

        # Function to load a style from a specific toml file (generated by imthemes app)
        # bgimgui.style_gui_from_file(bge.logic.expandPath("//ui_style.toml"))

    def setup_gui(self):
        io = imgui.get_io()

        # allow user to navigate UI with a keyboard
        io.config_flags |= imgui.ConfigFlags_.nav_enable_keyboard

        self.set_style()

        backend = self.backend

        # Set font global scaling factor to 2 for high res displays? (like retina)
        font_global_scaling_factor = 1
        backend.set_scaling_factors(font_global_scaling_factor)

        main_font_path = bge.logic.expandPath(
            "//Orbitron-VariableFont_wght.ttf")
        main_font_size_in_pixels = 20
        backend.set_main_font(main_font_path, main_font_size_in_pixels)

        extra_font_path = bge.logic.expandPath("//Blackout 2 AM.ttf")
        extra_font_size = 40
        self.extra_font = backend.add_extra_font(
            extra_font_path, extra_font_size)

        self.show_test_window = True
        self.show_custom_window = True

        # Alternately, store them in the GUI and just render as necessary (Recommended method)
        self.myTextWindow = MyTextWindow("potato", io)
        self.bar = MyCustomHealthBarWindow("Cool bar", io, 500, 20)

        self.randomForegroundImage = widgets.ForegroundImage(
            bge.logic.expandPath("//cursors/arrow.png"), rounding=5)
        self.randomForegroundImage.setImagePosition(100, 50)

        self.randomBackgroundImage = widgets.BackgroundImage(
            bge.logic.expandPath("//cursors/resize.png"))
        self.randomBackgroundImage.setImagePosition(500, 500)
        self.randomBackgroundImage.setScale(0.2, 0.2)

    def draw(self):
        backend = self.backend

        # Draw Menu Bar
        if imgui.begin_main_menu_bar():
            if imgui.begin_menu("File", True):

                clicked_quit, selected_quit = imgui.menu_item(
                    "Quit", "Cmd+Q", False, True
                )

                if clicked_quit:
                    sys.exit(0)

                imgui.end_menu()
            imgui.end_main_menu_bar()

        # Draw a stored window
        # You can also put this function call in a match-case statement to have one GUI
        # with multiple modes (like LoginScreen, ConnectScreen, MainGame, etc)
        # Or even use objects in a finite state machine
        self.myTextWindow.drawWindow()

        self.bar.drawWindow()

        screenWidth, screenHeight = backend.get_screen_size()

        # Can draw windows procedurally here too (without any wrapper objects for windows)
        imgui.show_demo_window()

        if self.show_custom_window:

            # Force set a window position
            # Pivot allows to modify the "center" position on the window
            # Where x=0 is the left and x=1 is the right
            imgui.set_next_window_pos(
                (screenWidth, screenHeight * 0.5), pivot=(1, 0.5))

            is_expand, self.show_custom_window = imgui.begin(
                "Custom window", True, flags=imgui.WindowFlags_.no_move | imgui.WindowFlags_.always_auto_resize | imgui.WindowFlags_.no_title_bar)
            if is_expand:
                imgui.text("Bar")
                imgui.text_colored(imgui.ImColor(0.2, 1.0, 0.0).value, "Eggs")
            imgui.end()

        if self.show_test_window:
            expand, self.show_test_window = imgui.begin("Default Window", True)
            if expand:
                imgui.push_font(self.extra_font)
                imgui.text("Text displayed using custom font")
                imgui.pop_font()
            imgui.end()

        self.randomForegroundImage.draw()
        self.randomBackgroundImage.draw()
